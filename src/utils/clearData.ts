/**
 * Utilit√°rio para limpeza de dados da aplica√ß√£o
 * Este arquivo cont√©m fun√ß√µes para limpar todos os dados de lan√ßamentos, contas e faturas
 */

import { useFinancialStore } from '@/store/useFinancialStore';

/**
 * Limpa todos os dados do store da aplica√ß√£o
 * Remove todas as movimenta√ß√µes, reseta filtros e m√©tricas
 */
export const clearAllFinancialData = () => {
  const store = useFinancialStore.getState();
  
  console.log('üßπ Iniciando limpeza de todos os dados financeiros...');
  console.log(`üìä Dados antes da limpeza: ${store.movimentacoes.length} movimenta√ß√µes`);
  
  // Limpar todos os dados usando a fun√ß√£o do store
  store.clearAllData();
  
  console.log('‚úÖ Limpeza conclu√≠da! Todos os dados foram removidos.');
  console.log('üìä Dados ap√≥s limpeza: 0 movimenta√ß√µes');
  
  return {
    success: true,
    message: 'Todos os dados de lan√ßamentos, contas e faturas foram limpos com sucesso.',
    clearedItems: store.movimentacoes.length
  };
};

/**
 * Verifica se existem dados no store
 */
export const checkDataExists = () => {
  const store = useFinancialStore.getState();
  
  return {
    hasMovimentacoes: store.movimentacoes.length > 0,
    totalMovimentacoes: store.movimentacoes.length,
    lastSync: store.lastSync,
    hasMetrics: store.metrics.totalReceitas > 0 || store.metrics.totalDespesas > 0
  };
};

/**
 * Fun√ß√£o para limpar dados espec√≠ficos (se necess√°rio no futuro)
 */
export const clearSpecificData = (type: 'movimentacoes' | 'metrics' | 'filters') => {
  const store = useFinancialStore.getState();
  
  switch (type) {
    case 'movimentacoes':
      store.setMovimentacoes([]);
      console.log('‚úÖ Movimenta√ß√µes limpas');
      break;
    case 'metrics':
      store.calculateMetrics();
      console.log('‚úÖ M√©tricas recalculadas');
      break;
    case 'filters':
      store.resetFilters();
      console.log('‚úÖ Filtros resetados');
      break;
    default:
      console.log('‚ùå Tipo de dados n√£o reconhecido');
  }
};